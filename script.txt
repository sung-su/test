
===

. net 을 아는 사람들 대상



.net maui 릴리즈

2022 04 first
2022 05 GA (General Availability

include tizen

dotnet dev mini 2205
Tizen emul로 Maui application demo

'22.11월에 예정인 .NET Conf 22 행사의 일부로 .NET MAUI 만 포커싱해서 미리 진행
focus conf vs 22 17.3
not preview on 2022
8월 focus

.net 6

workload

update tizen nui



hot reload 는 issue 17.4 정도에 업데이트 예정
main stream 에 포함되어서 
최대한 따라가려고 하지만
ms 에서 직접 컨트롤 하지 않다보니

조금 늦어지는 기능들이 있다

===

주제공유

저는 .NET MAUI on Tizen RPI 이라는 제목으로
Focus on MAUI with Tizen RPI

저는 .NET MAUI on Tizen RPI 이라는 제목으로
focus on maui 내용을 바탕으로 .NET MAUI 업데이트를 소개하고
Tizen RPI 에서 .NET MAUI 앱 데모를 하려고 합니다

===https://krdotnet.slack.com/archives/C03JWE8QBFT


profile
자마린 서포트 프로파일은 모바일
Tizen 은 tv wearable 프로파일 까지 지원 했었다

마우이에서는 모바일 프로파일 외에 추가적으로 데스크탑 프로파일을 서포트 한다
wearable ?
tizen 은 rpi를 통해 desktop profile을 지원하려고 한다.

focus 에서 말했다 시피
Tizen, supported by Samsung.

maui 메인스트림을 에 포함된 만큼
최대한 빠르게 업데이트 하려고 노력하고 있다

rpi 가 tizen에 새로 생긴 프로파일은 아니고
이전부터 iot 위해 제공하고 있었다
https://docs.microsoft.com/en-us/dotnet/maui/supported-platforms

10월에 정식 릴리즈

닷넷 플랫폼 위에서 여러가지 서비스를 이용하기 위해


하나의 프로젝트, 많은 플랫폼
.NET MAUI는 장치 및 해당 플랫폼에서 모든 다중 대상 지정을 처리하는 단일 프로젝트를 제공합니다.


데모
한가지 문제가 있다.
외부 라이브러리와 mct 을 사용했는데
아직 Tizen 을 support 하지 않아 
그부분을 제외하고 수행하였다

우리는 17.4에 포함 될 예정이다
--======





#1 main

안녕하세요
.NET MAUI on Tizen RPI 세션에 오신 모든 여러분 반갑습니다.

이 세션은
제목에서 보시면 알겠지만
.NET MAUI 와 RPI 그리고 Tizen 3가지 주제로 구성되어 있습니다.

최종적으로는
.NET MAUI Application 을 만들고
또 그 앱을 여러 플랫폼과 여러 프로파일의 타겟에서 실행해 보는것 입니다.

특히 Tizen platform RPI 환경에서
.NET MAUI Application 의 동작을 중점적으로 같이 살펴 보려고 합니다.


#2 contents
세션 구성을 간단히 보면 아래와 같습니다.

.NET MAUI 와 지난 릴리즈 이후 업데이트 된 내용을 간단히 소개하고
그 행사 내용과 함께 .NET MAUI 에 대한 내용 간단히 설명을 드릴 예정이구요

다음으로
.NET MAUI Tizen Backend 와 관련 된 부분의 업데이트 를 살펴본 후

Tizen RPI Demo 순서로 진행 할 예정입니다.


#3

제 소개를 잊을뻔했네요
저는 삼성전자 삼성 리서치 플랫폼 팀에서
Tizen 플랫폼 과 .NET 프레임워크 개발을 하고 있는
김성수 엔지니어라고 합니다.

제 깃허브 프로필인데요 
보시면
.net maui 의 전신인 자마린 폼즈 의 Tizen Backend 개발을 했었고
현재는 .net maui 의 Tizen Backend 개발을 하고 있구요

관련하여
여기 Tizen.NET 이라는 이름의 repo 에서 

.net6 workload 와 setting 가이드 트러블 슈팅 등
오늘 소개해드릴 내용들과 관련 정보를 제공하고 있습니다.
질문과 버그 리포트도 받고 있으니 후에 관심있으신 분들은 한번 들러보시면 좋을것 같습니다.

네 다시 돌아와서

다음은 .net maui conf focus on maui 입니다.

#4 .net maui

많은 분들이 이미 알고 계시겠지만
지난 8월에 MicroSoft .NET conf 2022 focus on MAUI 라는 이벤트가 있었습니다.
해당 이벤트는 11월에 있을 예정인 .NET Conf 2022 행사의 일부로 .NET MAUI 만 포커싱해서 미리 진행한 컨퍼런스였구요

그 이벤트에 대해 간단히 알아보고 가려고 합니다.

일단
.NET MAUI 는
 Multi Platform Application UI
의 약자로 마이크로소프트 닷넷에서 제공하는 
크로스 플랫폼 유아이 프레임 워크 입니다.

전신인 자마린 폼즈에서 더욱 발전하여 
여러 플랫폼과 여러 프로파일에서 사용 가능한 앱을 만들수 있게 되었고

이번에 비주얼 스튜디오 17.3 업데이트가 되면서
프리뷰가 아닌 main stream VS 에서도
정식으로 .net 마우이를 설치하고 사용할 수 있게 되었습니다. 

그리고 .net maui 의 많은 기능 소개와 더불어 많은 내용이 있었지만
그중 제가 생각하는 중요한 내용 몇가지를 소개해 드리겠습니다.

먼저
싱프 멀타 입ㅁ니다

개발자가
비주얼 스튜디오를 통해 생성한
하나의 프로젝트를 통해 
여러 플랫폼 에서 실행 가능한 앱을 산출해 내므로서
효율적인 개발이 가능한
크로스 플랫폼 ui 프레임워크로써
그 기능과 효율성을 강조했습니다.

다음으로 
사용하기 쉬운 디바이스 api 와 
많은 컨트롤 등
닷넷 마우이가 제공하는 기능들에 대한 내용이 있었구요

이전 자마린 폼즈 대비 향상된 성능을 강조하였습니다.

이런 점들로 인해
.net6 와 .net maui 의 사용자와 서드파티 라이브러리가 빠르게 증가하고 있음을 소개하였습니다.

그 외에도 많은 기능과 장점들이 소개되었는데요

그런 닷넷 마우이가 가진 많은 기능들과 장점을 
(닷넷 마우이가 서포트 하는 플랫폼인)
안드로이다 ios 외에도
타이젠에서도 함께 사용 할 수 있다는 점입니다.


#

닷넷 마우이가 공식 서포트하는 플랫폼 중 하나인 타이젠은

-타이젠은 닷넷 마우이가 서포트 하는 플랫폼으로서
-우선 저희 타이젠은

지난 5월 닷넷 마우이는 GA 릴리즈 부터 공식적으로 서포트를 시작했습니다.

다른 플랫폼들과는 조금 다르게 
제가 속해있는 저희 삼성 리서치 타이젠 닷넷 팀이 
닷넷 마우이 팀과 긴밀히 협력으로 제공하고 있는데요

그래서
닷넷 마우이 비주얼 스튜디오 업데이트와 조금 다른점이 있다면
타이젠의 경우에는
현재
비주얼 스튜디오 툴즈 포 타이젠이라는 익스텐션을 설치해서
이 익스텐션을 통해
마우이에서 타이젠을
타이젠에서 마우이를
사용할 수 잇도록 
닷넷 워크로드 등 닷넷 개발 환경과 
사용할 에뮬레이터와 타겟 등 타이젠 관련 개발환경을
쉽게 사용할 수 있도록
닷넷 마우이의 업데이트에 맞추어
제공하려고 노력 하고 있습니다.


#
다음으로
지난 5월 이후 현재까지 .NET MAUI 에서 있었던 Tizen 관련 업데이트에 대해 좀더 알아 보겠습니다.
알아 보려고 합니다.

9619 9620 2 개의 PR 이였는데요

내용은 타이젠 백엔드 엔진이 바뀌었습니다.

네 내부적으로는 아주 큰 변화죠

이유에 대해 설명을 드리자면
우선 근본적으로는 타이젠 플랫폼의 유아이 툴킷이 바뀌었기 때문입니다.

기존에 사용하고 있던 EFL 이라고 하는 유아이 툴킷이 디프리케이티드 되었고
이제는 네츄럴 유저 인터페이스 줄여서 NUI 라고 하는 새로운 유아이 툴킷을 사용하게 되었습니다.

그러면서
기존의 .net maui tizen backend 의 핸들러 코드들을 모두 수정 하면서
잠재적인 문제들을 수정했을 뿐만 아니라

새로운 엔진을 통해
랜더링 성능이 크게 향상되어 fps 등에서 많은 발전이 있었고
UI 부분 역시
이전에 미지원 하던 control 등을 더 지원하는 등
많은 이점을 얻게 되엇습니다.

좀 더 더 자세한 내용과 변경사항들은 Tizen.NET wiki 에서 보실 수 잇습니다.

#	

다음은 드디어 라즈베리 파이 관련 내용 입니다. 
타이젠은 라즈베리 파이 3 와 4 기기를
2017년에 타이젠 4.0 부터 현재까지 지원하고 있습니다.


iot 용 타겟으로써 시작하였으며
19년부터 서울 하드웨어 해커톤 에서 iot 디바이스로 사용되기도 하였고
현재 닷넷 마우이에서는 타이젠 데스크탑 프로파일 타겟으로 사용하고 있습니다.


오랜기간 사용된 만큼
라즈베리 파이를 사용해보신 분이라면 어렵지 않게 세팅을 하실수 있으며
플래싱이나 연결 방법 을 포함해서 닷넷 앱 개발을 시작하는 방법까지
타이젠 스쿨이라는 사이트를 통해 자세하게 제공하고 있습니다.



# 데모

이제 실제로 마우이 앱을 만들고
타겟에 올려보려고 하는데요

일단은 기본 마우이 템플릿을 통해 앱을 생성하고

안드로이드와 타이젠 플랫폼에서 실행해 볼겁니다.

다음으로
focus on maui 컨퍼런스에서 사용된
포인트 오브 세일이라는 앱을

실행해보려고 합니다.


#
닷넷 마우이 가 사용 가능한 
비주얼 스튜디오 2022 17.3 과 비주얼 스튜디오 2022 프리뷰를 사용하려고 하

 위해 visual studio tools for tizen extension 이 설치하여
타이젠을 사용할수 있는 환경 입니다.



#
수정햇다

==============================================





#6 nui
#7 control
#8 performance
#9 rpi
#10 tizen-school
#11 demo
#12 template
#13 point of sale
#14 limitation
#15 issue
#16 end



#2
구성은 다음과 같습니다.

말씀드린대로 
먼저 
.NET conf 2022 focus on MAUI 내용 을 짧게 살펴보고
컨퍼런스에서 다루지 않은
Tizen.NET 소식 update 후에
실제로 RPI 에서 Maui application demo 를 보여드리려고 합니다.

???

마지막으로 지난해 MS에서 .NET conf 에서 보여줬던 샘플앱인 .net podcasts앱을 실행해 보려고 합니다.
실제 MAUI app 의 Tizen 구조도 함께
 어떻게 만드지 간단한 샘플앱을 하나 같이 만들어 보면서 MAUI의 특징을 살펴볼 거구요
그 다음에 MAUI app에서 한단계 더 나아가 MAUI Blazor app에 대해서도 간단히 살펴보고
마지막으로 지난해 MS에서 .NET conf 에서 보여줬던 샘플앱인 .net podcasts앱을 실행해 보려고 합니다.

#3
간단히 제 소개를 드리자면
이게 제 깃허브 프로필 입니다
저는 삼성 리서치 커먼 플랫폼 랩에서
2017년 Samsung Tizen 에서 Tizen .NET 이라는 이름으로 .NET framework 를 도입하면서
Xamarin.Forms 의 Tizen Backend 개발을 하다가
현재는 Maui 의 Tizen backend 개발를 하고 있습니다.


닷넷을 접하게 된 계기는 2017년 타이젠 4.0이 릴리즈가 되었는데 이때 타이젠에서 .NET을 도입하게 되었습니다. 다넷에서 만든 크로스 플랫폼 앱을 타이젠에서도 실행할 수 있게 된 것이었는데요
저는 거기서 xamarin.forms로 만들 앱이 타이젠에서 잘 돌아갈 수 있도록 xamarin.form를 지원하는 업무를 맡고 있었습니다.
그러다 작년에 .net6와 함께 Maui가 공개가 되었죠
해서 지금은 maui 지원을 준비 하고 있습니다.



#4
이 세션을 들으시는 분들은 모두 이미 알고 계시겠지만
지난달 MS 에서 .NET conf 2022 부재 focus on MAUI 라는 행사가 있었는데요
해당 행사는 11월에 예정인 .NET Conf 22 행사의 일부로 .NET MAUI 만 포커싱해서 미리 진행한 컨퍼런스입니다.

5월에 GA 릴리즈를 하면서 
.NET conf mini 2205에서 
소개를 드렸었는데요

이번 focus on MAUI 에서는
VS 2022 에 버전 17.3 업데이트를 통해 닷넷 마우이가 제공되게 되었고 

닷넷 마우이에 대해 좀 더 자세히 소개하는 행사였습니다. 

간단히 요약하여 몇가지 말씀드리자면

먼저 MAUI 는
MAUI는 multi platform App UI의 약자로
하나의 코드 베이스를 사용하여 여러 플랫폼에서 실행될 수 있는 
크로스 플랫폼 UI 프레임워크입니다.

마우이의 전신이자
유명한 크로스플랫폼 UI 툴킷인 Xamarin Forms 를 발전시킨 모델로
성능을 대폭 향상시켜 자마린 대비 런치 속도에서 44%의 향상이 있었다고 합니다.

또한
개발자가 여러 OS 에서의 효율적인 개발이 가능 하도록

플랫폼 간 접근 방식으로 하나의 코드 기반만 유지하면 됩니다
hw api


또한
MAUI 의 개발자와 사용자가 크게 증가하여 3rd party library 가 빠르게 늘어나고 있다고 합니다.

MS는 
이토록 사용자가 증가하는 이유로 마우이를 도입하여 생산성이 크게 향상되었기 때문이라고 말하고 있습니다.

특히
하나의 프로젝트로 많은 크로스 플랫폼 에서 사용할수 있다는 점을 가장 큰 장점으로 꼽을수 있는데요

//.NET MAUI는 장치 및 해당 플랫폼에서 모든 다중 대상 지정을 처리하는 단일 프로젝트를 제공하

타이젠 역시 05월 GA 릴리즈에 업스트림에 포함이 되어
05월 mini에서 emulator 로 데모를 보



이처럼
많은 마우이 개발자/사용자 들이 크로스 플랫폼의 
타이젠도 확인 해 볼 수 있


이번 행사주제인 크로스 플랫폼 에서 사용하기 아주 좋은 도구라는 말이되겠죠



===
.net6 가 lts 인점도 크게 작용하는데요
이 .net 6를 지원하기 위해서는 workload...

데모
한가지 문제가 있다.
외부 라이브러리와 mct 을 사용했는데
아직 Tizen 을 support 하지 않아 
그부분을 제외하고 수행하였다

우리는 17.4에 포함 될 예정이다
??

#5
MAUI는 multi platform App UI의 약자로 하나의 코드 베이스를 사용하여 여러 플랫폼에서 실행될 수 있는 app 개발을 지원하는 프레임워크입니다.
닷넷에서 크로스 플랫폼 앱 개발이라고 하면 아시는 분들도 계시겠지만 기존의 자마린을 언급하지 않고 지나갈 수가 없을 것 같은데요

#6
그래서 먼저 자마린을 살펴보면 
xamarin .NET으로 안드로이드 ios 모바일 네이티브 앱을 만들고 빌드 할 수 있게 해주는 오픈소스 플랫폼 입니다.
c#으로 된 하나의 코드베이스를 사용하여 cross paltform app을 개발하는 방식은 제안했는데요
cross platform 앱을 만들때 플랫폼의 영향을 받지 않는 부분, 예를 들면 앱의 비지니스 로직 같은 부분은 굳은 플랫폼 마다 가지고 있을 필요가 없다는 것이죠
이렇게 공용으로 사용할 수 있는 부분은 하나만 두고 각 플랫폼 별로 UI 단만 각 플랫폼의 네이티브 UI 컨트롤을 사용해서 각각 구현하면 최대한 효율적으로 다양한플랫폼에서 돌악는 앱을 만들 수 있다는 것이었습니다.
#7
여기서 xamarin.form라고 앱 로직 뿐만 아니라 UI의 코드도 일부 공유할 수 있도록 공통으로 사용될 수 있는 컨트롤를 모아둔 UI 프레임워크가 추가가 되었습니다.
이렇게 자마린은 공용으로 사용할 수 있는 코드를 모은 프로젝트를 하나 두고 (PCL) 각 플랫폼 별 구현을 담은 프로젝트를이 그 공유 프로젝트를 참조하는 구조로 만들어 졌습니다.
실제 자마린을 써 보신 분들을 느끼셨을 수도 있는데요
방식 자체는 효율적이었는데 이제 여기서 문제는 플랫폼별로 프로젝트를 따로 관리하기 때문에 처음 앱을 만들때 부터 각플랫폼의 sdk를 따로 설치한다든가 / 각 프로젝트별로 참조해야 하는 패키지들 그리고 앱에 포함되어야 할 리소스들이 따로 관리되었어야 했습니다.
이게 처음 시작하는 입장에서는 환경을 세팅하는게 조금 번거로울 수 있었고, 유지 보수 차원에서도 앱이 커지고 업데이트가 될수록 관리가 어려워질 수 있었습니다.
#8
그리고 폼즈 같은 경우는 자마린 폼즈 컨트롤을 쓰면 플랫폼 각 컨트롤에 1대1로 매핑된 렌더러가 있어서 실제 플랫폼 위에서 돌아갈때는 그 렌더러를 통해 네이티브 UI 컨트롤로 렌더링 되어 돌아가는 형태였습니다.
실제 상용앱 같은걸 만들다 보면 자마린 폼즈의 컨트롤 만으로는 UI 다 구현할 수 없는 경우가 많았구요 
이런경우는 플랫폼 마다 네이티브 컨트롤을 써서 커스텀을 해야 하는데 폼즈의 구조가 컨트롤-렌더러 1대1이라 확장이 조금 번거로운 것이 있었습니다.
#9
닷넷6에 와서는 이러한 문제들이 많이 개선이 되고, 아예 자마린이 닷넷에 포함되게 되는데 그것이 바로 마우이입니다.
그러니까 마우이는 자마린의 진화된 형태라고 보시면 됩니다.
마우이를 보시면 기존 자마린 처럼 크로스플랫폼을 지원하는 네이티브 UI 앱을 만드는 것, 그러니까 네이티브 성능을 가지면서도 다양한 플랫폼에서 돌 수 있는 앱을 개발하는걸 지원 합니다.
여전히 주 목적은 최대한 많은 코드를 공유 가능하도록 하는 것이고요 
두번째싱글프로젝트, 그러니까 프로젝트 하나로 관리가 되게 됩니다. 
이게 자마린 과의 가장 큰 차이점 중 하나인데요 직전에 자마린이 프로젝트가 분리되어 있어서 생기는 문제점들이 개선이 된 것이죠 
이부분은 샘플앱을 만들어서 프로젝트를 직접 살펴보면서 다시 설명 드리겠습니다.
그리고 다음으로 기존 자마린이 모바일앱에 주로 포커스가 맞춰져 있었다고 하면 마우이에서는 데스크탑 시나리오 추가 되었습니다.
그리고 마지막으로 기존 자마린사용 가능했던 툴들을 그대로 사용할 수 있도록 지원합니다.
 UI 디버깅할때 많이 쓰이던  xaml hotreload가 그대로 지원이 됩니다.
xaml hotreload는 xaml을 수정했을때 앱을 다시 빌드하지 않고 파일 저장만하면 화면에 업데이트 된 모습을 보여주는 툴이었는데요
마우이에 와서는 xaml 뿐만 아니라 c#를 코드의 수정도 반영해주는 .net hotreload가 지원이 되게 되었습니다.
#10
또한 UI 컨트롤도 살짝만 살펴보면 API 스펙상으로 자마린과 큰 차이가 없지만 내부 구조적으로 많이 변경이 되었습니다.
마우이에서는 렌더러 대신 핸들러를 쓰는데 기존 자마린은 컨트롤 - 렌더러 닥 매필이 되어 있었는데 마우이는 그 사이에 추상화된 레이어를 하나 넣어서 직접적인 연관관계라 없도록 함으로써 확장에 유연한 구조가 되었고,
#11
이 핸들러를 static 오픈을 하고 핸들러를 통해 네이티브 컨트롤에 직접 접근하는 길을 열어서 커스텀도 훨씬 수월하게 할 수 있게 되었습니다.

그럼 지금부터 maui app을 한번 만들면서 살펴보도록 하겠습니다.
 







 
#12
다음으로 소개 드릴 것은 마우이 블레이저 앱입니다.
이것은 간단히 말하면 마우이와 기존 닷넷에서 제공되던 블레이저 웹 어셈블리가 결합된 형태라고 보시면 됩니다.
마우이앱 프로젝트에서 블레이저 컴포넌트들을 구현한 프로젝트를 참조해서 그 컴포넌트들을 그대로 사용하게 되는 것입니다.
이를 위해서 블레이저 웹뷰라는 특별한 컨트롤이 제공이 되고요
이 컨트롤를 기존 마우이 컨트롤 처럼 앱의 아무곳에나 붙일 수 있습니다. 
이렇게 만들어진 앱은 .net 프로세스에 의해서 native처럼 동작하고 embeddeed 된 web browser control로 렌더링 됩니다. 
또한, 마우이가 지원하는 모든 플랫폼 위에서 실행 될 수 있습니다.
이런것을 제공하는 이유는 기존에 ASP.NET Blazor로 웹 앱 개발을 하던 개발자가 클라이언트 앱을 만드는데 플랫폼의 디바이스 api같은 플랫폼 기능을 쓰길 원한다거나 할 때, 보통은 이런 경우면 네이티브 앱을 만들어야 하는데 
웹 개발을 주로 하던 개발자가 갑자기 네이티브 앱을 만드는 건 쉽지가 않죠
그럴때 마우이 블레이저앱을 쓰면 해결이 된다는 것이죠
마우이 블레이저 앱은 마우이앱입니다 그러니가 플랫폼의 모든 피처를 사용할 수있습니다. 
web 개발자 관점에서는 자신이 가진 웹 스킬과 기존 컴포넌트들을 활용해서 native client app을 만들수 있게 된 것이죠.

#15
여기까지 마우이를 알아보는 시간을 가졌습니다.
마우이는 현재 프리뷰 11 이 프리릴리즈 되었구요
현재 계획으로는 올 2분기 정식 릴리즈가 될 예정이라고 합니다.

자마린 대비 여러가지로 많이 개선이 되어서 
새롭게 크로스 플랫폼 앱을 시작해보고 싶으신 분들이나 네이티브 수준의 클라이언트 앱이 필요한 웹 개발자분들이라면 지금 마우이를 써보시는 것도 좋을 것 같고요
기존에 자마린으로 개발하시던 분들은 MS 자마린 앱을 마우이로 마이그레이션 하는 것도 지원을 할 예정인 것 같구요
미리 마우이를 접해 보시는 것도 좋을 것 같습니다.
#16
들어주셔서 감사합니다
